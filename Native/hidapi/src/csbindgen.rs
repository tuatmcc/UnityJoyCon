/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::ffi;


#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_init(

) -> c_int
{
    ffi::hid_init(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_exit(

) -> c_int
{
    ffi::hid_exit(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_enumerate(
    vendor_id: c_ushort,
    product_id: c_ushort
) -> *mut ffi::hid_device_info
{
    ffi::hid_enumerate(
        vendor_id,
        product_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_free_enumeration(
    devs: *mut ffi::hid_device_info
)
{
    ffi::hid_free_enumeration(
        devs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_open(
    vendor_id: c_ushort,
    product_id: c_ushort,
    serial_number: *const ffi::wchar_t
) -> *mut ffi::hid_device
{
    ffi::hid_open(
        vendor_id,
        product_id,
        serial_number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_open_path(
    path: *const c_char
) -> *mut ffi::hid_device
{
    ffi::hid_open_path(
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_write(
    dev: *mut ffi::hid_device,
    data: *const c_uchar,
    length: usize
) -> c_int
{
    ffi::hid_write(
        dev,
        data,
        length
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_read_timeout(
    dev: *mut ffi::hid_device,
    data: *mut c_uchar,
    length: usize,
    milliseconds: c_int
) -> c_int
{
    ffi::hid_read_timeout(
        dev,
        data,
        length,
        milliseconds
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_read(
    dev: *mut ffi::hid_device,
    data: *mut c_uchar,
    length: usize
) -> c_int
{
    ffi::hid_read(
        dev,
        data,
        length
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_read_error(
    dev: *mut ffi::hid_device
) -> *const ffi::wchar_t
{
    ffi::hid_read_error(
        dev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_set_nonblocking(
    dev: *mut ffi::hid_device,
    nonblock: c_int
) -> c_int
{
    ffi::hid_set_nonblocking(
        dev,
        nonblock
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_send_feature_report(
    dev: *mut ffi::hid_device,
    data: *const c_uchar,
    length: usize
) -> c_int
{
    ffi::hid_send_feature_report(
        dev,
        data,
        length
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_feature_report(
    dev: *mut ffi::hid_device,
    data: *mut c_uchar,
    length: usize
) -> c_int
{
    ffi::hid_get_feature_report(
        dev,
        data,
        length
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_send_output_report(
    dev: *mut ffi::hid_device,
    data: *const c_uchar,
    length: usize
) -> c_int
{
    ffi::hid_send_output_report(
        dev,
        data,
        length
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_input_report(
    dev: *mut ffi::hid_device,
    data: *mut c_uchar,
    length: usize
) -> c_int
{
    ffi::hid_get_input_report(
        dev,
        data,
        length
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_close(
    dev: *mut ffi::hid_device
)
{
    ffi::hid_close(
        dev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_manufacturer_string(
    dev: *mut ffi::hid_device,
    string: *mut ffi::wchar_t,
    maxlen: usize
) -> c_int
{
    ffi::hid_get_manufacturer_string(
        dev,
        string,
        maxlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_product_string(
    dev: *mut ffi::hid_device,
    string: *mut ffi::wchar_t,
    maxlen: usize
) -> c_int
{
    ffi::hid_get_product_string(
        dev,
        string,
        maxlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_serial_number_string(
    dev: *mut ffi::hid_device,
    string: *mut ffi::wchar_t,
    maxlen: usize
) -> c_int
{
    ffi::hid_get_serial_number_string(
        dev,
        string,
        maxlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_device_info(
    dev: *mut ffi::hid_device
) -> *mut ffi::hid_device_info
{
    ffi::hid_get_device_info(
        dev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_indexed_string(
    dev: *mut ffi::hid_device,
    string_index: c_int,
    string: *mut ffi::wchar_t,
    maxlen: usize
) -> c_int
{
    ffi::hid_get_indexed_string(
        dev,
        string_index,
        string,
        maxlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_get_report_descriptor(
    dev: *mut ffi::hid_device,
    buf: *mut c_uchar,
    buf_size: usize
) -> c_int
{
    ffi::hid_get_report_descriptor(
        dev,
        buf,
        buf_size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_error(
    dev: *mut ffi::hid_device
) -> *const ffi::wchar_t
{
    ffi::hid_error(
        dev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_version(

) -> *const ffi::hid_api_version
{
    ffi::hid_version(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hid_version_str(

) -> *const c_char
{
    ffi::hid_version_str(

    )
}

    