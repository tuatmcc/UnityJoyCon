// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace UnityJoycon
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "hidapi";





        /// <summary>
        ///  @brief Initialize the HIDAPI library.
        /// 
        /// This function initializes the HIDAPI library. Calling it is not
        /// strictly necessary, as it will be called automatically by
        /// hid_enumerate() and any of the hid_open_*() functions if it is
        /// needed.  This function should be called at the beginning of
        /// execution however, if there is a chance of HIDAPI handles
        /// being opened by different threads simultaneously.
        /// 
        /// @ingroup API
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// Call hid_error(NULL) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_init();

        /// <summary>
        ///  @brief Finalize the HIDAPI library.
        /// 
        /// This function frees all of the static data associated with
        /// HIDAPI. It should be called at the end of execution to avoid
        /// memory leaks.
        /// 
        /// @ingroup API
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_exit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_exit();

        /// <summary>
        ///  @brief Enumerate the HID Devices.
        /// 
        /// This function returns a linked list of all the HID devices
        /// attached to the system which match vendor_id and product_id.
        /// If @p vendor_id is set to 0 then any vendor matches.
        /// If @p product_id is set to 0 then any product matches.
        /// If @p vendor_id and @p product_id are both set to 0, then
        /// all HID devices will be returned.
        /// 
        /// @ingroup API
        /// @param vendor_id The Vendor ID (VID) of the types of device
        /// to open.
        /// @param product_id The Product ID (PID) of the types of
        /// device to open.
        /// 
        /// @returns
        /// This function returns a pointer to a linked list of type
        /// struct #hid_device_info, containing information about the HID devices
        /// attached to the system,
        /// or NULL in the case of failure or if no HID devices present in the system.
        /// Call hid_error(NULL) to get the failure reason.
        /// 
        /// @note The returned value by this function must to be freed by calling hid_free_enumeration(),
        /// when not needed anymore.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_enumerate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern hid_device_info* hid_enumerate(ushort vendor_id, ushort product_id);

        /// <summary>
        ///  @brief Free an enumeration Linked List
        /// 
        /// This function frees a linked list created by hid_enumerate().
        /// 
        /// @ingroup API
        /// @param devs Pointer to a list of struct_device returned from
        /// hid_enumerate().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_free_enumeration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void hid_free_enumeration(hid_device_info* devs);

        /// <summary>
        ///  @brief Open a HID device using a Vendor ID (VID), Product ID
        /// (PID) and optionally a serial number.
        /// 
        /// If @p serial_number is NULL, the first device with the
        /// specified VID and PID is opened.
        /// 
        /// @ingroup API
        /// @param vendor_id The Vendor ID (VID) of the device to open.
        /// @param product_id The Product ID (PID) of the device to open.
        /// @param serial_number The Serial Number of the device to open
        /// (Optionally NULL).
        /// 
        /// @returns
        /// This function returns a pointer to a #hid_device object on
        /// success or NULL on failure.
        /// Call hid_error(NULL) to get the failure reason.
        /// 
        /// @note The returned object must be freed by calling hid_close(),
        /// when not needed anymore.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_open", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern hid_device_* hid_open(ushort vendor_id, ushort product_id, int* serial_number);

        /// <summary>
        ///  @brief Open a HID device by its path name.
        /// 
        /// The path name be determined by calling hid_enumerate(), or a
        /// platform-specific path name can be used (eg: /dev/hidraw0 on
        /// Linux).
        /// 
        /// @ingroup API
        /// @param path The path name of the device to open
        /// 
        /// @returns
        /// This function returns a pointer to a #hid_device object on
        /// success or NULL on failure.
        /// Call hid_error(NULL) to get the failure reason.
        /// 
        /// @note The returned object must be freed by calling hid_close(),
        /// when not needed anymore.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_open_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern hid_device_* hid_open_path(byte* path);

        /// <summary>
        ///  @brief Write an Output report to a HID device.
        /// 
        /// The first byte of @p data[] must contain the Report ID. For
        /// devices which only support a single report, this must be set
        /// to 0x0. The remaining bytes contain the report data. Since
        /// the Report ID is mandatory, calls to hid_write() will always
        /// contain one more byte than the report contains. For example,
        /// if a hid report is 16 bytes long, 17 bytes must be passed to
        /// hid_write(), the Report ID (or 0x0, for devices with a
        /// single report), followed by the report data (16 bytes). In
        /// this example, the length passed in would be 17.
        /// 
        /// hid_write() will send the data on the first interrupt OUT
        /// endpoint, if one exists. If it does not the behaviour is as
        /// @ref hid_send_output_report
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data The data to send, including the report number as
        /// the first byte.
        /// @param length The length in bytes of the data to send.
        /// 
        /// @returns
        /// This function returns the actual number of bytes written and
        /// -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_write", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_write(hid_device_* dev, byte* data, nuint length);

        /// <summary>
        ///  @brief Read an Input report from a HID device with timeout.
        /// 
        /// Input reports are returned
        /// to the host through the INTERRUPT IN endpoint. The first byte will
        /// contain the Report number if the device uses numbered reports.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data A buffer to put the read data into.
        /// @param length The number of bytes to read. For devices with
        /// multiple reports, make sure to read an extra byte for
        /// the report number.
        /// @param milliseconds timeout in milliseconds or -1 for blocking wait.
        /// 
        /// @returns
        /// This function returns the actual number of bytes read and
        /// -1 on error.
        /// Call hid_read_error(dev) to get the failure reason.
        /// If no packet was available to be read within
        /// the timeout period, this function returns 0.
        /// 
        /// @note This function doesn't change the buffer returned by the hid_error(dev).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_read_timeout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_read_timeout(hid_device_* dev, byte* data, nuint length, int milliseconds);

        /// <summary>
        ///  @brief Read an Input report from a HID device.
        /// 
        /// Input reports are returned
        /// to the host through the INTERRUPT IN endpoint. The first byte will
        /// contain the Report number if the device uses numbered reports.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data A buffer to put the read data into.
        /// @param length The number of bytes to read. For devices with
        /// multiple reports, make sure to read an extra byte for
        /// the report number.
        /// 
        /// @returns
        /// This function returns the actual number of bytes read and
        /// -1 on error.
        /// Call hid_read_error(dev) to get the failure reason.
        /// If no packet was available to be read and
        /// the handle is in non-blocking mode, this function returns 0.
        /// 
        /// @note This function doesn't change the buffer returned by the hid_error(dev).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_read", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_read(hid_device_* dev, byte* data, nuint length);

        /// <summary>
        ///  @brief Get a string describing the last error which occurred during hid_read/hid_read_timeout.
        /// 
        /// Since version 0.15.0, @ref HID_API_VERSION &gt;= HID_API_MAKE_VERSION(0, 15, 0)
        /// 
        /// This function is intended for logging/debugging purposes.
        /// 
        /// This function guarantees to never return NULL for a valid @ref dev.
        /// If there was no error in the last call to hid_read/hid_read_error -
        /// the returned string clearly indicates that.
        /// 
        /// Strings returned from hid_read_error() must not be freed by the user,
        /// i.e. owned by HIDAPI library.
        /// Device-specific error string may remain allocated at most until hid_close() is called.
        /// 
        /// @ingroup API
        /// @param dev A device handle. Shall never be NULL.
        /// 
        /// @returns
        /// A string describing the hid_read/hid_read_timeout error (if any).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_read_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int* hid_read_error(hid_device_* dev);

        /// <summary>
        ///  @brief Set the device handle to be non-blocking.
        /// 
        /// In non-blocking mode calls to hid_read() will return
        /// immediately with a value of 0 if there is no data to be
        /// read. In blocking mode, hid_read() will wait (block) until
        /// there is data to read before returning.
        /// 
        /// Nonblocking can be turned on and off at any time.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param nonblock enable or not the nonblocking reads
        /// - 1 to enable nonblocking
        /// - 0 to disable nonblocking.
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_set_nonblocking", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_set_nonblocking(hid_device_* dev, int nonblock);

        /// <summary>
        ///  @brief Send a Feature report to the device.
        /// 
        /// Feature reports are sent over the Control endpoint as a
        /// Set_Report transfer.  The first byte of @p data[] must
        /// contain the Report ID. For devices which only support a
        /// single report, this must be set to 0x0. The remaining bytes
        /// contain the report data. Since the Report ID is mandatory,
        /// calls to hid_send_feature_report() will always contain one
        /// more byte than the report contains. For example, if a hid
        /// report is 16 bytes long, 17 bytes must be passed to
        /// hid_send_feature_report(): the Report ID (or 0x0, for
        /// devices which do not use numbered reports), followed by the
        /// report data (16 bytes). In this example, the length passed
        /// in would be 17.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data The data to send, including the report number as
        /// the first byte.
        /// @param length The length in bytes of the data to send, including
        /// the report number.
        /// 
        /// @returns
        /// This function returns the actual number of bytes written and
        /// -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_send_feature_report", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_send_feature_report(hid_device_* dev, byte* data, nuint length);

        /// <summary>
        ///  @brief Get a feature report from a HID device.
        /// 
        /// Set the first byte of @p data[] to the Report ID of the
        /// report to be read.  Make sure to allow space for this
        /// extra byte in @p data[]. Upon return, the first byte will
        /// still contain the Report ID, and the report data will
        /// start in data[1].
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data A buffer to put the read data into, including
        /// the Report ID. Set the first byte of @p data[] to the
        /// Report ID of the report to be read, or set it to zero
        /// if your device does not use numbered reports.
        /// @param length The number of bytes to read, including an
        /// extra byte for the report ID. The buffer can be longer
        /// than the actual report.
        /// 
        /// @returns
        /// This function returns the number of bytes read plus
        /// one for the report ID (which is still in the first
        /// byte), or -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_feature_report", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_feature_report(hid_device_* dev, byte* data, nuint length);

        /// <summary>
        ///  @brief Send a Output report to the device.
        /// 
        /// Since version 0.15.0, @ref HID_API_VERSION &gt;= HID_API_MAKE_VERSION(0, 15, 0)
        /// 
        /// Output reports are sent over the Control endpoint as a
        /// Set_Report transfer.  The first byte of @p data[] must
        /// contain the Report ID. For devices which only support a
        /// single report, this must be set to 0x0. The remaining bytes
        /// contain the report data. Since the Report ID is mandatory,
        /// calls to hid_send_output_report() will always contain one
        /// more byte than the report contains. For example, if a hid
        /// report is 16 bytes long, 17 bytes must be passed to
        /// hid_send_output_report(): the Report ID (or 0x0, for
        /// devices which do not use numbered reports), followed by the
        /// report data (16 bytes). In this example, the length passed
        /// in would be 17.
        /// 
        /// This function sets the return value of hid_error().
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data The data to send, including the report number as
        /// the first byte.
        /// @param length The length in bytes of the data to send, including
        /// the report number.
        /// 
        /// @returns
        /// This function returns the actual number of bytes written and
        /// -1 on error.
        /// 
        /// @see @ref hid_write
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_send_output_report", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_send_output_report(hid_device_* dev, byte* data, nuint length);

        /// <summary>
        ///  @brief Get a input report from a HID device.
        /// 
        /// Since version 0.10.0, @ref HID_API_VERSION &gt;= HID_API_MAKE_VERSION(0, 10, 0)
        /// 
        /// Set the first byte of @p data[] to the Report ID of the
        /// report to be read. Make sure to allow space for this
        /// extra byte in @p data[]. Upon return, the first byte will
        /// still contain the Report ID, and the report data will
        /// start in data[1].
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param data A buffer to put the read data into, including
        /// the Report ID. Set the first byte of @p data[] to the
        /// Report ID of the report to be read, or set it to zero
        /// if your device does not use numbered reports.
        /// @param length The number of bytes to read, including an
        /// extra byte for the report ID. The buffer can be longer
        /// than the actual report.
        /// 
        /// @returns
        /// This function returns the number of bytes read plus
        /// one for the report ID (which is still in the first
        /// byte), or -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_input_report", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_input_report(hid_device_* dev, byte* data, nuint length);

        /// <summary>
        ///  @brief Close a HID device.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_close", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void hid_close(hid_device_* dev);

        /// <summary>
        ///  @brief Get The Manufacturer String from a HID device.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param string A wide string buffer to put the data into.
        /// @param maxlen The length of the buffer in multiples of wchar_t.
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_manufacturer_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_manufacturer_string(hid_device_* dev, int* @string, nuint maxlen);

        /// <summary>
        ///  @brief Get The Product String from a HID device.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param string A wide string buffer to put the data into.
        /// @param maxlen The length of the buffer in multiples of wchar_t.
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_product_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_product_string(hid_device_* dev, int* @string, nuint maxlen);

        /// <summary>
        ///  @brief Get The Serial Number String from a HID device.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param string A wide string buffer to put the data into.
        /// @param maxlen The length of the buffer in multiples of wchar_t.
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_serial_number_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_serial_number_string(hid_device_* dev, int* @string, nuint maxlen);

        /// <summary>
        ///  @brief Get The struct #hid_device_info from a HID device.
        /// 
        /// Since version 0.13.0, @ref HID_API_VERSION &gt;= HID_API_MAKE_VERSION(0, 13, 0)
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// 
        /// @returns
        /// This function returns a pointer to the struct #hid_device_info
        /// for this hid_device, or NULL in the case of failure.
        /// Call hid_error(dev) to get the failure reason.
        /// This struct is valid until the device is closed with hid_close().
        /// 
        /// @note The returned object is owned by the @p dev, and SHOULD NOT be freed by the user.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_device_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern hid_device_info* hid_get_device_info(hid_device_* dev);

        /// <summary>
        ///  @brief Get a string from a HID device, based on its string index.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param string_index The index of the string to get.
        /// @param string A wide string buffer to put the data into.
        /// @param maxlen The length of the buffer in multiples of wchar_t.
        /// 
        /// @returns
        /// This function returns 0 on success and -1 on error.
        /// Call hid_error(dev) to get the failure reason.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_indexed_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_indexed_string(hid_device_* dev, int string_index, int* @string, nuint maxlen);

        /// <summary>
        ///  @brief Get a report descriptor from a HID device.
        /// 
        /// Since version 0.14.0, @ref HID_API_VERSION &gt;= HID_API_MAKE_VERSION(0, 14, 0)
        /// 
        /// User has to provide a preallocated buffer where descriptor will be copied to.
        /// The recommended size for preallocated buffer is @ref HID_API_MAX_REPORT_DESCRIPTOR_SIZE bytes.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open().
        /// @param buf The buffer to copy descriptor into.
        /// @param buf_size The size of the buffer in bytes.
        /// 
        /// @returns
        /// This function returns non-negative number of bytes actually copied, or -1 on error.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_get_report_descriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int hid_get_report_descriptor(hid_device_* dev, byte* buf, nuint buf_size);

        /// <summary>
        ///  @brief Get a string describing the last error which occurred.
        /// 
        /// This function is intended for logging/debugging purposes.
        /// 
        /// This function guarantees to never return NULL.
        /// If there was no error in the last function call -
        /// the returned string clearly indicates that.
        /// 
        /// Any HIDAPI function that can explicitly indicate an execution failure
        /// (e.g. by an error code, or by returning NULL) - may set the error string,
        /// to be returned by this function.
        /// 
        /// Strings returned from hid_error() must not be freed by the user,
        /// i.e. owned by HIDAPI library.
        /// Device-specific error string may remain allocated at most until hid_close() is called.
        /// Global error string may remain allocated at most until hid_exit() is called.
        /// 
        /// @ingroup API
        /// @param dev A device handle returned from hid_open(),
        /// or NULL to get the last non-device-specific error
        /// (e.g. for errors in hid_open() or hid_enumerate()).
        /// 
        /// @returns
        /// A string describing the last error (if any).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int* hid_error(hid_device_* dev);

        /// <summary>
        ///  @brief Get a runtime version of the library.
        /// 
        /// This function is thread-safe.
        /// 
        /// @ingroup API
        /// 
        /// @returns
        /// Pointer to statically allocated struct, that contains version.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern hid_api_version* hid_version();

        /// <summary>
        ///  @brief Get a runtime version string of the library.
        /// 
        /// This function is thread-safe.
        /// 
        /// @ingroup API
        /// 
        /// @returns
        /// Pointer to statically allocated string, that contains version string.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "csbindgen_hid_version_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* hid_version_str();


    }

    /// <summary>
    ///  A structure to hold the version numbers.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct hid_api_version
    {
        /// <summary>
        /// &lt; major version number
        /// </summary>
        public int major;
        /// <summary>
        /// &lt; minor version number
        /// </summary>
        public int minor;
        /// <summary>
        /// &lt; patch version number
        /// </summary>
        public int patch;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct hid_device_
    {
        public fixed byte _unused[1];
    }

    /// <summary>
    ///  hidapi info structure
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct hid_device_info
    {
        /// <summary>
        ///  Platform-specific device path
        /// </summary>
        public byte* path;
        /// <summary>
        ///  Device Vendor ID
        /// </summary>
        public ushort vendor_id;
        /// <summary>
        ///  Device Product ID
        /// </summary>
        public ushort product_id;
        /// <summary>
        ///  Serial Number
        /// </summary>
        public int* serial_number;
        /// <summary>
        ///  Device Release Number in binary-coded decimal,
        /// also known as Device Version Number
        /// </summary>
        public ushort release_number;
        /// <summary>
        ///  Manufacturer String
        /// </summary>
        public int* manufacturer_string;
        /// <summary>
        ///  Product string
        /// </summary>
        public int* product_string;
        /// <summary>
        ///  Usage Page for this Device/Interface
        /// (Windows/Mac/hidraw only)
        /// </summary>
        public ushort usage_page;
        /// <summary>
        ///  Usage for this Device/Interface
        /// (Windows/Mac/hidraw only)
        /// </summary>
        public ushort usage;
        /// <summary>
        ///  The USB interface which this logical device
        /// represents.
        /// 
        /// Valid only if the device is a USB HID device.
        /// Set to -1 in all other cases.
        /// </summary>
        public int interface_number;
        /// <summary>
        ///  Pointer to the next device
        /// </summary>
        public hid_device_info* next;
        /// <summary>
        ///  Underlying bus type
        /// Since version 0.13.0, @ref HID_API_VERSION &gt;= HID_API_MAKE_VERSION(0, 13, 0)
        /// </summary>
        public uint bus_type;
    }



}
